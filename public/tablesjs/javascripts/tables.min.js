/*
 * ## Tables.JS
 * TablesJs.js
 * This library follows the best practices enumarated here:
 * https://www.w3.org/community/webed/wiki/JavaScript_best_practices
 * 
 * Read documentation here:
 * https://github.com/leandrosardi/tablesjs
 * 
 */


var tablesJs = {
    // events when the user add or remove a value
    events: {},

	/*
	 * Returns the version of this commonsJs library.
	 *  
	 */
	version: function() {
		return '1.0.1';
	},
			
	/*
	 * Draws the table inside a parent element.
	 * Attributes:
	 * - parent: is usually a <div> DOM element, where we want to place the table inside.
	 * - h: is a hash descriptor for the table we want to create.
	 * 
	 * List of attributes in the hash descriptor
	 * - rows
	 * - class
	 * - remove_row_button
	 * - row_heigh
	 * - header
	 * - on_field_update
	 * - on_cell_created
	 * 
	 */
	draw: function(parent, h) {
		// TODO: Validar the format of h: 
		// - validar atributes requeridos, 
		// - agregar valores por defecto,
		// - validar lista valores permitidos,
		// - validar formato de los valores.   

		var table = document.createElement("table");
		var thead = document.createElement("thead");
		var tbody = document.createElement("tbody");
		var th = null;
		var text = null;
		var tr = null;
		var td = null;
		var input = null;

        // store function to trigger when the user adds a value
        if (h['on_edit_cell'] != null) {
            tablesJs.events[parent.id+".on_edit_cell"] = h['on_edit_cell'];
        }

        // store function to trigger when the user removes a value
        if (h['on_remove_row'] != null) {
            tablesJs.events[parent.id+".on_remove_row"] = h['on_remove_row'];
        }

		// set up the table class
		table.setAttribute('class', h['class'].toString());

		// add this data, for forther rows added
		// if remove_row_button is defined
		if (typeof h['remove_row_button'] === "undefined") {
			table.setAttribute('data-allow-remove-row', 'no');
		} else {
			if (typeof h['remove_row_button'] === "boolean") {
				if ( h['remove_row_button'] == true ) {
					table.setAttribute('data-allow-remove-row', 'yes');
				} else {
					table.setAttribute('data-allow-remove-row', 'no');
				}
			} else {
				throw 'tablesJs: remove_row_button must be boolean.'
			}
		}

		// ask if row_height is an int
		if (h['row_height'] === parseInt(h['row_height'], 10)) {
			// remember the row_height value for further rows added.
			table.setAttribute('data-row-height', h['row_height'].toString());

			// set up the height of the table header
			thead.setAttribute('height', h['row_height']);
			thead.style.height = h['row_height'];
		}

		// adding the header columns
		if (Array.isArray(h['header']) == true) {
			h['header'].forEach(function (value, index, array) {
				// setting up default values
				if ( typeof value['id'] === 'undefined' ) {
					throw 'teblesJs: header id must be defined';
				}

				if ( typeof value['type'] === 'undefined' ) {
					value['type'] = 'text'; // TODO: store different data-types in constant attributes
				} else {
					// TODO: validate list of allowed values
				}

				if ( typeof value['placeholder'] === 'undefined' ) {
					value['placeholder'] = '';
				}

				if ( typeof value['value'] === 'undefined' ) {
					value['value'] = '';
				}

				// add the column
				th = document.createElement("th");

				th.setAttribute('width', value['width']);
				th.style.width = value['width'];

				th.setAttribute('height', h['row_height']);
				th.style.height = h['row_height'];

				// remember some attributes for further rows added
				th.setAttribute('data-id', value['id'].toString());
				th.setAttribute('data-type', value['type'].toString());
				th.setAttribute('data-placeholder', value['placeholder'].toString());
				th.setAttribute('data-value', value['value'].toString());

				// add heder caption
				text = document.createTextNode(value['text']);
				
				// append nodes
				th.appendChild(text);
				thead.appendChild(th);

				// remember the row_height value for further rows added.
				table.setAttribute('data-row-height', h['row_height'].toString());				

			});
		}
		
		table.appendChild(thead);
		table.appendChild(tbody);
		parent.appendChild(table);

		// add as many rows as requested in h['rows']
		if (typeof h['rows'] === "undefined") {
			// do nothing
		} else {
			if (typeof h['rows'] === "number") {
				let i = 0;
				while (i<parseInt(h['rows'])) {
					tablesJs.add(parent);
					i++;
				}
			} else {
				throw 'tablesJs: rows must be a number.'
			}
		}

		// TODO: apply jquery validation on text-fields
	},

	/*
	 * Add a row at the end of the table.
	 * 
	 */
	add: function(parent) {
		var table = parent.getElementsByTagName('table')[0];
		// TODO: validate the table exists

		var thead = parent.getElementsByTagName('thead')[0];
		// TODO: validate the thead exists
		
		var tbody = parent.getElementsByTagName('tbody')[0];
		// TODO: validate the tbody exists

		// grab the height of each row
		var height = table.getAttribute('data-row-height');

		// create the row
		var tr = document.createElement('tr');

		// other variables
		var th = null;
		var td = null;
		var input = null;

		// iterate the hedaer columns (th)
		var ths = thead.getElementsByTagName('th');
		for (i=0; i<ths.length; i++) {
			th = ths[i];
			// create cell (td)
			td = document.createElement('td');
			// create input field
			input = document.createElement('input');
			input.setAttribute('type', 'text');
			// setup type
			td.setAttribute('data-type', th.getAttribute('data-type'));
			// setup placeholder
			input.setAttribute('placeholder', th.getAttribute('data-placeholder'));
			// setup value
			input.setAttribute('value', th.getAttribute('data-value'));
			input.setAttribute('type', th.getAttribute('data-type'));
			// append the input in the cell (td)
			td.appendChild(input);			
			// if exists a function for this parent, for when a value is added
			if (tablesJs.events[parent.id+".on_edit_cell"] != null) {
				// call the function
				input.onkeyup = function() { 
					// get this element
					var input = this;
					// get the row number
					var rownum = input.parentNode.parentNode.rowIndex;
					// get the col number
					var colnum = input.parentNode.cellIndex;
					// get the input value
					var value = input.value;
					// call the event
					tablesJs.events[parent.id+".on_edit_cell"](rownum, colnum, value); 
				}
			}
			// append the cell in the row (tr)
			tr.appendChild(td); 
		}

		// add remove button
		if ( table.getAttribute('data-allow-remove-row') == 'yes' ) {
			td = document.createElement('td');
			input = document.createElement('input');
			input.setAttribute('type', 'button');
			input.setAttribute('value', 'remove');
			input.setAttribute('class', 'btn btn-red btn-mini');
			input.addEventListener('click', function() {
				// get this element
				var input = this;
				// get the row number
				var rownum = input.parentNode.parentNode.rowIndex;
				// remove the row
				tr.remove();
				// call event
				if (tablesJs.events[parent.id+".on_remove_row"]) {
					// call the function
					tablesJs.events[parent.id+".on_remove_row"](rownum);
				}
			});
			td.appendChild(input);
			tr.appendChild(td);
		} 

		// append the row into the tbody
		tbody.appendChild(tr);
	},

	/*
	 * Return the number of rows of the table.
	 * 
	 */
	count: function(parent) {
		var table = parent.getElementsByTagName('table')[0];
		// TODO: validate the table exists
		
		var tbody = parent.getElementsByTagName('tbody')[0];
		// TODO: validate the tbody exists

		return tbody.getElementsByTagName('tr').length;
	},

	/*
	 * Return the number of rows of the table.
	 * 
	 */
	remove: function(parent, rownum) {
		var table = parent.getElementsByTagName('table')[0];
		// TODO: validate the table exists
		
		var tbody = parent.getElementsByTagName('tbody')[0];
		// TODO: validate the tbody exists

		var trs = tbody.getElementsByTagName('tr');

		// TODO: validate the rownum is between 0 and trs.length-1

		// remove the row
		trs[rownum].remove();
	},

	/*
	 * Return the input element of the cell.
	 * For internal use only.
	 * User shouldn't call this method.
	 * 
	 */
	get_input: function(parent, rownum, colnum) {
		var table = parent.getElementsByTagName('table')[0];
		// TODO: validate the table exists
		
		var tbody = parent.getElementsByTagName('tbody')[0];
		// TODO: validate the tbody exists

		var trs = tbody.getElementsByTagName('tr');

		// TODO: validate the rownum is between 0 and trs.length-1

		var tr = trs[rownum];

		var tds = tr.getElementsByTagName('td');

		// TODO: validate the colnum is between 0 and tds.length-1

		var td = tds[colnum];

		var input = td.getElementsByTagName('input')[0];
		// TODO: validate input exists

		return input;
	},

	/*
	 * Return the value of a cell
	 * 
	 */
	get_value: function(parent, rownum, colnum) {
		var input = tablesJs.get_input(parent, rownum, colnum);
		return input.getAttribute('value');
	},

	/*
	 * Set the value of a cell
	 * 
	 */
	set_value: function(parent, rownum, colnum, x) {
		var input = tablesJs.get_input(parent, rownum, colnum);
		return input.setAttribute('value', x);
	},

	/*
	 * Return the border of a cell
	 * 
	 */
	get_color: function(parent, rownum, colnum) {
		var input = tablesJs.get_input(parent, rownum, colnum);
		return input.style.borderColor;
	},

	/*
	 * Return the border of a cell
	 * 
	 */
	set_color: function(parent, rownum, colnum, x) {
		var input = tablesJs.get_input(parent, rownum, colnum);
		return input.style.borderColor = x;
	},

	/*
	 * Set cursor focus in the on an editable cell.
	 * 
	 */
	focus: function(parent, rownum, colnum) {
		var table = parent.getElementsByTagName('table')[0];
		// TODO: validate the table exists
		
		var tbody = parent.getElementsByTagName('tbody')[0];
		// TODO: validate the tbody exists

		var trs = tbody.getElementsByTagName('tr');

		// TODO: validate the rownum is between 0 and trs.length-1

		var tr = trs[rownum];

		var tds = tr.getElementsByTagName('td');

		// TODO: validate the colnum is between 0 and tds.length-1

		var td = tds[colnum];

		var input = td.getElementsByTagName('input')[0];
		// TODO: validate input exists

		return input.focus();
	},

}; // var tablesJs = {